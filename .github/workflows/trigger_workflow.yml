# file which will trigger overall workflow. This will use all internal workflows which are created separately

#name of workflow
name: Main workflow

#event which triggers this workflow
on:
    pull_request:
        branches: [main]
        types: [opened, synchronize]
        #Below ensures that workflow will be triggered only when files from Tests or Validation are present in PR
        paths:
            - 'Tests/*'
            - 'Validation/*'
            - '.github/**'
            - '!Validation/Automation/*'
            - '!Validation/Tools/*'

#list of jobs to run
#Here these two or any more jobs if defined will run in parallel
#So if we need to run them sequentially, may be because we want to check if 1st works or not, then will need to change the flow
#2nd job will run if 1st job is success. And for this, we need to use 'needs' key variable and provide the 1st or previous job (though it can be any job within jobs)
jobs:
    #name of a jobs defined here
    files_in_pr:
        uses: ./.github/workflows/get_list_of_files.yml
    
    valid_files:
        runs-on: ubuntu-latest
        needs: files_in_pr
        if: ${{ needs.files_in_pr.outputs.relevantFilesChanged == 'true' }}
        steps:
            - run: echo "Valid files present, will run pylint"

    call_pylint_check:
        needs: valid_files
        uses: ./.github/workflows/check_pylint.yml

    call_run_system_test:
        needs: call_pylint_check
        uses: ./.github/workflows/run_test.yml
    
    update_results:
        needs: [call_pylint_check, call_run_system_test]
        if: always()
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                ref: ${{ github.head_ref }} #source branch name
            
            - name: Setup python
              uses: actions/setup-python@v5
              with:
                python-version: '3.10'
            
            - name: Install python dependencies
              run: |
                python -m pip install --upgrade pip
                pip install openpyxl
            
            - name: Set env variables
              run: |
                echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
                echo "PR_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
                echo "GITHUB_REPO=${{ github.repository }}" >> $GITHUB_ENV
                echo "GITHUB_REPO_OWNER"=${{ github.repository_owner }} >> $GITHUB_ENV
                echo "GITHUB_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV
                echo "PYLINT_RESULT=${{ needs.call_pylint_check.result }}" >> $GITHUB_ENV
                echo "SYSTEM_TEST_RESULT=${{ needs.call_run_system_test.result }}" >> $GITHUB_ENV
            
            - name: Display env variables (for debugging)
              run: |
                echo "PR_NUMBER=$PR_NUMBER"
                echo "PR_LINK"=$PR_LINK
                echo "GITHUB_REPO=$GITHUB_REPO"
                echo "GITHUB_REPO_OWNER=$GITHUB_REPO_OWNER"
                echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
                echo "PYLINT_RESULT=$PYLINT_RESULT"
                echo "SYSTEM_TEST_RESULT=$SYSTEM_TEST_RESULT"


            - name: Get results from jobs and update excel
              run: |
                echo "Run ci results script"
                python Validation/Tools/ci_results.py
              env:
                PR_NUMBER: ${{ env.PR_NUMBER }}
                PR_LINK: ${{ env.PR_LINK }}
                GITHUB_REPO: ${{ env.GITHUB_REPO }}
                GITHUB_REPO_OWNER: ${{ env.GITHUB_REPO_OWNER }}
                GITHUB_RUN_ID: ${{ env.GITHUB_RUN_ID }}
                PYLINT_RESULT: ${{ env.PYLINT_RESULT }}
                SYSTEM_TEST_RESULT: ${{ env.SYSTEM_TEST_RESULT }}


    
